#!/usr/bin/env python3

"""Generate theme and README"""

import argparse
import asyncio
import json
from os import _exit as exit
from pathlib import Path
from pprint import pprint
from random import choice
import re
from string import Template
import sys

import httpx
import tabulate
from tabulate import tabulate as table

tabulate.PRESERVE_WHITESPACE = True

ROOT_DIR = Path(__file__).parent.parent.absolute()
DATA_DIR = ROOT_DIR / "properties"
THEMES_DIR = ROOT_DIR / "docs"
THEME_FILENAME = "dark-cool-color-theme.json"


def abort(*args, **kwargs):
    """Print error message and exit"""
    print("\033[31mError\033[0m", *args, **kwargs, file=sys.stderr)
    exit(1)


class App:

    def __init__(self, args):
        self.args = args
        self.is_verbose = args.verbose
        self.is_dryrun = args.dry_run

    def load_json(self, filename: str):
        """Return JSON decoded object from file in DATA_DIR or exit with error"""
        with open(DATA_DIR.joinpath(filename)) as fh:
            try:
                contents = self.strip_comments(fh)
                data = json.loads(contents)
            except json.decoder.JSONDecodeError as e:
                lines = contents.splitlines()
                abort(f"JSON errors found -- {filename}:{e.lineno}:{e.colno}\n"
                    f"     {e.msg}"
                    f"     '{lines[e.lineno-1]}'")
        return data

    def strip_comments(self, fh) -> str:
        """Return contents of fh file stripped of // style comments
        Params
        ------
        fh (file): a .read()-supporting file-like object
        """
        comment = re.compile(r"^\s*//")
        trailing= re.compile(r"\s*//.*$")

        lines = [trailing.sub("", line) for line in fh if not comment.match(line)]
        return "\n".join(lines)

    async def fetch_swatches(self, *colors):
        """Download swatch images."""

        if self.is_dryrun:
            return

        agents = [
            "Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0",
            "Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0",
            "Mozilla/5.0 (X11; Linux x86_64; rv:95.0) Gecko/20100101 Firefox/95.0"
        ]

        async with httpx.AsyncClient(http2=True) as client:

            for code in colors:

                outfile = ROOT_DIR / "screenshots" / "swatches" / f"{code}.png"
                url = f"https://via.placeholder.com/20/{code}/?text=+"

                response = await client.get((url), headers={
                    "user-agent": choice(agents),
                })

                if "image" not in response.headers["Content-Type"]:
                    abort(f"Invalid color swatch: {url}")

                outfile.write_bytes(response.content)

    async def generate_color_markdown(self, filename: str) -> (str, str):
        """Generate the markdown strings to be embedded in README.tpl.md"""
        manifest = self.load_json(filename)
        rows, refs, markdown = [], [], ""

        for c in manifest["groups"]:
            if not c["hex"]:
                continue
            c["hex"] = c["hex"].upper()

        colors = [clr for clr in manifest["groups"] if clr.get("readme")]
        await self.fetch_swatches(*[c["hex"] for c in colors if c.get("hex")])

        color_tpl = Template("![#${hex}][] `#${hex}`")
        ref_tpl = Template("[#${hex}]: screenshots/swatches/${hex}.png")

        for clr in colors:
            for key in ("element", "hex", "desc", "color-desc"):
                if not key in clr or not clr.get(key, None):
                    abort(f"Missing required item: {key} from color: {clr}")

            hexc = clr["hex"].lstrip("#").upper()
            uses = ", ".join(clr.get("examples", []))
            examples = f" (ie {uses})" if uses else ""

            rows.append({
                'Element': clr["element"],
                'Hex': color_tpl.substitute(hex=hexc),
                'Color': clr["color-desc"].title(),
                'Description': f"{clr['desc']}{examples}",
            })

            refs.append(ref_tpl.substitute(hex=hexc))

        return dict(
            colorTable=table(rows, headers="keys", tablefmt="github"),
            refsDefs="\n".join(refs)
        )

    def generate_theme_colors(self, filename: str) -> dict:
        """Return colors dict for theme JSON converted from colors.jsonc"""
        manifest = self.load_json(filename)
        colors = {}

        # generate colors from groups
        for color in manifest["groups"]:
            for key in color["theme-colors"]:
                colors[key] = f"#{color['hex']}"

        # add individual colors
        for key, hex in manifest["individual"].items():
            colors[key] = f"#{hex}"

        return colors

    def generate_theme(self):
        """Generate and save theme file"""

        theme = {
            "name": "Dark and Cool",
            "type": "dark",
            "colors": {},
            "tokenColors": []
        }
        theme["colors"] = self.generate_theme_colors("colors.jsonc")
        theme["tokenColors"] = self.load_json("tokens.jsonc")
        contents = json.dumps(theme, indent=4)

        if self.is_verbose:
            pprint(theme, sort_dicts=False)

        self.save_file(THEMES_DIR.joinpath(THEME_FILENAME), contents)

    async def generate_readme(self):
        """Generate README.md from colors.jsonc"""
        tpl_file = THEMES_DIR / "README.tpl.md"
        tpl = Template(tpl_file.read_text())
        md = await self.generate_color_markdown("colors.jsonc")
        contents = tpl.substitute(**md)

        if self.is_verbose:
            print(contents)

        self.save_file(ROOT_DIR / "README.md", contents)

    def save_file(self, filepath, contents: str):
        """After confirming write contents to filepath

        Params
        ------
        filepath (pathlib.Path): where to write file
        contents (str): contents to write to file
        """
        if self.is_dryrun:
            return

        response = input(f"Save {filepath.name}? [y/N] ").strip().lower()
        if response not in ["y", "yes"]:
            return

        filepath.write_text(contents)


async def main():
    """User interface"""

    parser = argparse.ArgumentParser(
        description=f"Generate README.md and {THEME_FILENAME}"
    )

    parser.add_argument(
        "--theme", "-t",
        action=argparse.BooleanOptionalAction,
        default=False,
        help=f"Generate {THEME_FILENAME}",
    )

    parser.add_argument(
        "--readme", "-r",
        action=argparse.BooleanOptionalAction,
        default=False,
        help="Generate README.md",
    )

    parser.add_argument(
        "--all", "-a",
        action=argparse.BooleanOptionalAction,
        default=False,
        help="Generate all files",
    )

    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="Verbose mode",
    )

    parser.add_argument(
        "--dry-run", "-d",
        action="store_true",
        help="Dry run mode",
    )

    args = parser.parse_args()

    app = App(args)

    if args.theme or args.all:
        app.generate_theme()

    if args.readme or args.all:
        await app.generate_readme()


if __name__ == "__main__":
    asyncio.run(main())
